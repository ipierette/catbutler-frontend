name: 🚀 CI/CD Pipeline - Quality First

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  quality-tests:
    name: 🧪 Quality Assurance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: 🏗️ Build project
        run: npm run build

      - name: 🧪 Run unit tests
        run: npm run test:unit

      - name: 🧹 Cleanup ports and processes
        run: |
          sudo lsof -t -i:5173 | xargs -r sudo kill -9 || true
          sudo lsof -t -i:5174 | xargs -r sudo kill -9 || true
          pkill -f "vite" || true
          pkill -f "preview" || true
          sleep 3

      - name: 🏆 Run Quality Assurance Tests (Rigorous)
        run: npx playwright test --config playwright.ci.config.js
        env:
          CI: true

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-test-results
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  build:
    name: 🏗️ Build for Production
    runs-on: ubuntu-latest
    needs: quality-tests
    if: needs.quality-tests.result == 'success'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build optimized production bundle
        run: npm run build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/

  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-tests, build]
    if: github.ref == 'refs/heads/main' && needs.quality-tests.result == 'success' && needs.build.result == 'success'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: dist/

      - name: 🚀 Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          if [ -z "$VERCEL_TOKEN" ]; then
            echo "⚠️ VERCEL_TOKEN não configurado - Deploy ignorado"
            echo "Configure os secrets: VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID"
            exit 0
          fi
          
          echo "🔧 Instalando Vercel CLI..."
          npm install -g vercel@latest
          
          echo "🚀 Fazendo deploy para produção..."
          vercel --prod --token=$VERCEL_TOKEN --yes

  quality-report:
    name: 📋 Quality Report
    runs-on: ubuntu-latest
    needs: [quality-tests, build, deploy]
    if: always()
    
    steps:
      - name: 📊 Generate Quality Summary
        run: |
          echo "# 🎯 Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Quality Tests: ${{ needs.quality-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Deploy: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY