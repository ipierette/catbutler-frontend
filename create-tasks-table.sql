-- üê± CatButler - Cria√ß√£o da Tabela Tasks
-- Execute este SQL no Supabase Dashboard > SQL Editor

-- 1. Criar tabela tasks
CREATE TABLE IF NOT EXISTS public.tasks (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  titulo TEXT NOT NULL,
  descricao TEXT,
  categoria TEXT NOT NULL DEFAULT 'Outros',
  prioridade TEXT NOT NULL DEFAULT 'M√©dia' CHECK (prioridade IN ('Baixa', 'M√©dia', 'Alta')),
  status TEXT NOT NULL DEFAULT 'Pendente' CHECK (status IN ('Pendente', 'Em Andamento', 'Conclu√≠da')),
  data_criacao TIMESTAMPTZ DEFAULT NOW(),
  data_vencimento DATE,
  data_conclusao TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 2. Criar √≠ndices para performance
CREATE INDEX IF NOT EXISTS idx_tasks_user_id ON public.tasks(user_id);
CREATE INDEX IF NOT EXISTS idx_tasks_status ON public.tasks(status);
CREATE INDEX IF NOT EXISTS idx_tasks_categoria ON public.tasks(categoria);
CREATE INDEX IF NOT EXISTS idx_tasks_prioridade ON public.tasks(prioridade);
CREATE INDEX IF NOT EXISTS idx_tasks_data_vencimento ON public.tasks(data_vencimento);

-- 3. Habilitar RLS (Row Level Security)
ALTER TABLE public.tasks ENABLE ROW LEVEL SECURITY;

-- 4. Criar pol√≠ticas de acesso
-- Usu√°rios podem ver apenas suas pr√≥prias tarefas
DROP POLICY IF EXISTS "Users can view own tasks" ON public.tasks;
CREATE POLICY "Users can view own tasks" 
ON public.tasks FOR SELECT 
USING (auth.uid() = user_id);

-- Usu√°rios podem inserir apenas suas pr√≥prias tarefas
DROP POLICY IF EXISTS "Users can insert own tasks" ON public.tasks;
CREATE POLICY "Users can insert own tasks" 
ON public.tasks FOR INSERT 
WITH CHECK (auth.uid() = user_id);

-- Usu√°rios podem atualizar apenas suas pr√≥prias tarefas
DROP POLICY IF EXISTS "Users can update own tasks" ON public.tasks;
CREATE POLICY "Users can update own tasks" 
ON public.tasks FOR UPDATE 
USING (auth.uid() = user_id);

-- Usu√°rios podem deletar apenas suas pr√≥prias tarefas
DROP POLICY IF EXISTS "Users can delete own tasks" ON public.tasks;
CREATE POLICY "Users can delete own tasks" 
ON public.tasks FOR DELETE 
USING (auth.uid() = user_id);

-- 5. Criar fun√ß√£o para atualizar updated_at automaticamente
CREATE OR REPLACE FUNCTION handle_tasks_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  
  -- Se o status mudou para "Conclu√≠da", definir data_conclusao
  IF NEW.status = 'Conclu√≠da' AND OLD.status != 'Conclu√≠da' THEN
    NEW.data_conclusao = NOW();
  ELSIF NEW.status != 'Conclu√≠da' AND OLD.status = 'Conclu√≠da' THEN
    NEW.data_conclusao = NULL;
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 6. Criar trigger para updated_at e data_conclusao
DROP TRIGGER IF EXISTS tasks_updated_at ON public.tasks;
CREATE TRIGGER tasks_updated_at
  BEFORE UPDATE ON public.tasks
  FOR EACH ROW
  EXECUTE FUNCTION handle_tasks_updated_at();

-- 7. Criar fun√ß√£o para estat√≠sticas de tarefas
CREATE OR REPLACE FUNCTION get_tasks_stats(user_uuid UUID)
RETURNS TABLE (
  total_tasks BIGINT,
  pending_tasks BIGINT,
  in_progress_tasks BIGINT,
  completed_tasks BIGINT,
  overdue_tasks BIGINT
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    COUNT(*) as total_tasks,
    COUNT(*) FILTER (WHERE status = 'Pendente') as pending_tasks,
    COUNT(*) FILTER (WHERE status = 'Em Andamento') as in_progress_tasks,
    COUNT(*) FILTER (WHERE status = 'Conclu√≠da') as completed_tasks,
    COUNT(*) FILTER (WHERE status != 'Conclu√≠da' AND data_vencimento < CURRENT_DATE) as overdue_tasks
  FROM public.tasks 
  WHERE user_id = user_uuid;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 8. Inserir tarefas exemplo para usu√°rios existentes (opcional - remover se n√£o quiser dados de exemplo)
/*
INSERT INTO public.tasks (user_id, titulo, descricao, categoria, prioridade, status, data_vencimento)
SELECT 
  id,
  'Limpar a cozinha',
  'Lavar lou√ßa, limpar bancada e organizar geladeira',
  'Faxina',
  'Alta',
  'Pendente',
  CURRENT_DATE + INTERVAL '1 day'
FROM auth.users 
WHERE id IN (SELECT id FROM public.profiles)
ON CONFLICT DO NOTHING;
*/

-- ‚úÖ Tabela tasks criada com sucesso!
-- Funcionalidades implementadas:
-- - CRUD completo com RLS
-- - Auto-atualiza√ß√£o de timestamps
-- - Auto-defini√ß√£o de data_conclusao
-- - √çndices para performance
-- - Fun√ß√£o de estat√≠sticas
-- - Constraints para valores v√°lidos